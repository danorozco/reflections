How did viewing a diff between two versions of a file help you see the bug that was introduced?
The application compared the two files and I was able to focus my time looking at the difference the application identified versus spending time looking for the difference.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You would be able to revert or reference back to a previous version to either help you in troubleshooting, recover a part of your code you modified regretfully, or look at the progressive ways your code changed.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?
Pros:  You have control on when and at what point you commit. So you can control the size in betwen commits.
Cons:  If you don't remember or aren't consistent, then you can run into issues where you commit after big changes or not at all.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Git is specifically focused on coding and development versus general files like Google Docs or other general version control systems.

How can you use the commands git log and git diff to view the history of files?
You can use the git log to see all the versions of the files you have committed.  Then use git diff to see what edits you have made between any two points of changes.

How might using version control make you more confident to make changes that could break something?
I know I can always revert back to the previous state if changes create a problem or bug.


Now that you have your workspace set up, what do you want to try using Git for?
Store my code and version control.